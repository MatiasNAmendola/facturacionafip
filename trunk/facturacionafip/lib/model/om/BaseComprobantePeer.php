<?php

/**
 * Base static class for performing query and update operations on the 'comprobante' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Fri Sep 25 18:13:02 2009
 *
 * @package    lib.model.om
 */
abstract class BaseComprobantePeer {

	/** the default database name for this class */
	const DATABASE_NAME = 'propel';

	/** the table name for this class */
	const TABLE_NAME = 'comprobante';

	/** A class that can be returned by this peer. */
	const CLASS_DEFAULT = 'lib.model.Comprobante';

	/** The total number of columns. */
	const NUM_COLUMNS = 24;

	/** The number of lazy-loaded columns. */
	const NUM_LAZY_LOAD_COLUMNS = 0;

	/** the column name for the ID field */
	const ID = 'comprobante.ID';

	/** the column name for the TIPO_COMPROBANTE_ID field */
	const TIPO_COMPROBANTE_ID = 'comprobante.TIPO_COMPROBANTE_ID';

	/** the column name for the NRO_COMPROBANTE field */
	const NRO_COMPROBANTE = 'comprobante.NRO_COMPROBANTE';

	/** the column name for the PUNTO_VENTA_ID field */
	const PUNTO_VENTA_ID = 'comprobante.PUNTO_VENTA_ID';

	/** the column name for the FECHA_COMPROBANTE field */
	const FECHA_COMPROBANTE = 'comprobante.FECHA_COMPROBANTE';

	/** the column name for the CLIENTE_ID field */
	const CLIENTE_ID = 'comprobante.CLIENTE_ID';

	/** the column name for the CBT_DESDE field */
	const CBT_DESDE = 'comprobante.CBT_DESDE';

	/** the column name for the CBT_HASTA field */
	const CBT_HASTA = 'comprobante.CBT_HASTA';

	/** the column name for the IMP_TOTAL field */
	const IMP_TOTAL = 'comprobante.IMP_TOTAL';

	/** the column name for the IMP_TOTAL_CONCEPTOS field */
	const IMP_TOTAL_CONCEPTOS = 'comprobante.IMP_TOTAL_CONCEPTOS';

	/** the column name for the IMP_NETO field */
	const IMP_NETO = 'comprobante.IMP_NETO';

	/** the column name for the IMP_LIQUIDADO field */
	const IMP_LIQUIDADO = 'comprobante.IMP_LIQUIDADO';

	/** the column name for the IMP_LIQUIDADO_RNI field */
	const IMP_LIQUIDADO_RNI = 'comprobante.IMP_LIQUIDADO_RNI';

	/** the column name for the IMP_OPERACIONES_EX field */
	const IMP_OPERACIONES_EX = 'comprobante.IMP_OPERACIONES_EX';

	/** the column name for the ES_SERVICIO field */
	const ES_SERVICIO = 'comprobante.ES_SERVICIO';

	/** the column name for the FECHA_SERVICIO_DESDE field */
	const FECHA_SERVICIO_DESDE = 'comprobante.FECHA_SERVICIO_DESDE';

	/** the column name for the FECHA_SERVICIO_HASTA field */
	const FECHA_SERVICIO_HASTA = 'comprobante.FECHA_SERVICIO_HASTA';

	/** the column name for the FECHA_VENCIMIENTO_PAGO field */
	const FECHA_VENCIMIENTO_PAGO = 'comprobante.FECHA_VENCIMIENTO_PAGO';

	/** the column name for the CAE field */
	const CAE = 'comprobante.CAE';

	/** the column name for the FECHA_CAE field */
	const FECHA_CAE = 'comprobante.FECHA_CAE';

	/** the column name for the FECHA_VTO_CAE field */
	const FECHA_VTO_CAE = 'comprobante.FECHA_VTO_CAE';

	/** the column name for the RESULTADO field */
	const RESULTADO = 'comprobante.RESULTADO';

	/** the column name for the MOTIVO field */
	const MOTIVO = 'comprobante.MOTIVO';

	/** the column name for the REPROCESO field */
	const REPROCESO = 'comprobante.REPROCESO';

	/**
	 * An identiy map to hold any loaded instances of Comprobante objects.
	 * This must be public so that other peer classes can access this when hydrating from JOIN
	 * queries.
	 * @var        array Comprobante[]
	 */
	public static $instances = array();

	/**
	 * The MapBuilder instance for this peer.
	 * @var        MapBuilder
	 */
	private static $mapBuilder = null;

	/**
	 * holds an array of fieldnames
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[self::TYPE_PHPNAME][0] = 'Id'
	 */
	private static $fieldNames = array (
		BasePeer::TYPE_PHPNAME => array ('Id', 'TipoComprobanteId', 'NroComprobante', 'PuntoVentaId', 'FechaComprobante', 'ClienteId', 'CbtDesde', 'CbtHasta', 'ImpTotal', 'ImpTotalConceptos', 'ImpNeto', 'ImpLiquidado', 'ImpLiquidadoRni', 'ImpOperacionesEx', 'EsServicio', 'FechaServicioDesde', 'FechaServicioHasta', 'FechaVencimientoPago', 'Cae', 'FechaCae', 'FechaVtoCae', 'Resultado', 'Motivo', 'Reproceso', ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('id', 'tipoComprobanteId', 'nroComprobante', 'puntoVentaId', 'fechaComprobante', 'clienteId', 'cbtDesde', 'cbtHasta', 'impTotal', 'impTotalConceptos', 'impNeto', 'impLiquidado', 'impLiquidadoRni', 'impOperacionesEx', 'esServicio', 'fechaServicioDesde', 'fechaServicioHasta', 'fechaVencimientoPago', 'cae', 'fechaCae', 'fechaVtoCae', 'resultado', 'motivo', 'reproceso', ),
		BasePeer::TYPE_COLNAME => array (self::ID, self::TIPO_COMPROBANTE_ID, self::NRO_COMPROBANTE, self::PUNTO_VENTA_ID, self::FECHA_COMPROBANTE, self::CLIENTE_ID, self::CBT_DESDE, self::CBT_HASTA, self::IMP_TOTAL, self::IMP_TOTAL_CONCEPTOS, self::IMP_NETO, self::IMP_LIQUIDADO, self::IMP_LIQUIDADO_RNI, self::IMP_OPERACIONES_EX, self::ES_SERVICIO, self::FECHA_SERVICIO_DESDE, self::FECHA_SERVICIO_HASTA, self::FECHA_VENCIMIENTO_PAGO, self::CAE, self::FECHA_CAE, self::FECHA_VTO_CAE, self::RESULTADO, self::MOTIVO, self::REPROCESO, ),
		BasePeer::TYPE_FIELDNAME => array ('id', 'tipo_comprobante_id', 'nro_comprobante', 'punto_venta_id', 'fecha_comprobante', 'cliente_id', 'cbt_desde', 'cbt_hasta', 'imp_total', 'imp_total_conceptos', 'imp_neto', 'imp_liquidado', 'imp_liquidado_rni', 'imp_operaciones_ex', 'es_servicio', 'fecha_servicio_desde', 'fecha_servicio_hasta', 'fecha_vencimiento_pago', 'cae', 'fecha_cae', 'fecha_vto_cae', 'resultado', 'motivo', 'reproceso', ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, )
	);

	/**
	 * holds an array of keys for quick access to the fieldnames array
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[BasePeer::TYPE_PHPNAME]['Id'] = 0
	 */
	private static $fieldKeys = array (
		BasePeer::TYPE_PHPNAME => array ('Id' => 0, 'TipoComprobanteId' => 1, 'NroComprobante' => 2, 'PuntoVentaId' => 3, 'FechaComprobante' => 4, 'ClienteId' => 5, 'CbtDesde' => 6, 'CbtHasta' => 7, 'ImpTotal' => 8, 'ImpTotalConceptos' => 9, 'ImpNeto' => 10, 'ImpLiquidado' => 11, 'ImpLiquidadoRni' => 12, 'ImpOperacionesEx' => 13, 'EsServicio' => 14, 'FechaServicioDesde' => 15, 'FechaServicioHasta' => 16, 'FechaVencimientoPago' => 17, 'Cae' => 18, 'FechaCae' => 19, 'FechaVtoCae' => 20, 'Resultado' => 21, 'Motivo' => 22, 'Reproceso' => 23, ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('id' => 0, 'tipoComprobanteId' => 1, 'nroComprobante' => 2, 'puntoVentaId' => 3, 'fechaComprobante' => 4, 'clienteId' => 5, 'cbtDesde' => 6, 'cbtHasta' => 7, 'impTotal' => 8, 'impTotalConceptos' => 9, 'impNeto' => 10, 'impLiquidado' => 11, 'impLiquidadoRni' => 12, 'impOperacionesEx' => 13, 'esServicio' => 14, 'fechaServicioDesde' => 15, 'fechaServicioHasta' => 16, 'fechaVencimientoPago' => 17, 'cae' => 18, 'fechaCae' => 19, 'fechaVtoCae' => 20, 'resultado' => 21, 'motivo' => 22, 'reproceso' => 23, ),
		BasePeer::TYPE_COLNAME => array (self::ID => 0, self::TIPO_COMPROBANTE_ID => 1, self::NRO_COMPROBANTE => 2, self::PUNTO_VENTA_ID => 3, self::FECHA_COMPROBANTE => 4, self::CLIENTE_ID => 5, self::CBT_DESDE => 6, self::CBT_HASTA => 7, self::IMP_TOTAL => 8, self::IMP_TOTAL_CONCEPTOS => 9, self::IMP_NETO => 10, self::IMP_LIQUIDADO => 11, self::IMP_LIQUIDADO_RNI => 12, self::IMP_OPERACIONES_EX => 13, self::ES_SERVICIO => 14, self::FECHA_SERVICIO_DESDE => 15, self::FECHA_SERVICIO_HASTA => 16, self::FECHA_VENCIMIENTO_PAGO => 17, self::CAE => 18, self::FECHA_CAE => 19, self::FECHA_VTO_CAE => 20, self::RESULTADO => 21, self::MOTIVO => 22, self::REPROCESO => 23, ),
		BasePeer::TYPE_FIELDNAME => array ('id' => 0, 'tipo_comprobante_id' => 1, 'nro_comprobante' => 2, 'punto_venta_id' => 3, 'fecha_comprobante' => 4, 'cliente_id' => 5, 'cbt_desde' => 6, 'cbt_hasta' => 7, 'imp_total' => 8, 'imp_total_conceptos' => 9, 'imp_neto' => 10, 'imp_liquidado' => 11, 'imp_liquidado_rni' => 12, 'imp_operaciones_ex' => 13, 'es_servicio' => 14, 'fecha_servicio_desde' => 15, 'fecha_servicio_hasta' => 16, 'fecha_vencimiento_pago' => 17, 'cae' => 18, 'fecha_cae' => 19, 'fecha_vto_cae' => 20, 'resultado' => 21, 'motivo' => 22, 'reproceso' => 23, ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, )
	);

	/**
	 * Get a (singleton) instance of the MapBuilder for this peer class.
	 * @return     MapBuilder The map builder for this peer
	 */
	public static function getMapBuilder()
	{
		if (self::$mapBuilder === null) {
			self::$mapBuilder = new ComprobanteMapBuilder();
		}
		return self::$mapBuilder;
	}
	/**
	 * Translates a fieldname to another type
	 *
	 * @param      string $name field name
	 * @param      string $fromType One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                         BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @param      string $toType   One of the class type constants
	 * @return     string translated name of the field.
	 * @throws     PropelException - if the specified name could not be found in the fieldname mappings.
	 */
	static public function translateFieldName($name, $fromType, $toType)
	{
		$toNames = self::getFieldNames($toType);
		$key = isset(self::$fieldKeys[$fromType][$name]) ? self::$fieldKeys[$fromType][$name] : null;
		if ($key === null) {
			throw new PropelException("'$name' could not be found in the field names of type '$fromType'. These are: " . print_r(self::$fieldKeys[$fromType], true));
		}
		return $toNames[$key];
	}

	/**
	 * Returns an array of field names.
	 *
	 * @param      string $type The type of fieldnames to return:
	 *                      One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                      BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     array A list of field names
	 */

	static public function getFieldNames($type = BasePeer::TYPE_PHPNAME)
	{
		if (!array_key_exists($type, self::$fieldNames)) {
			throw new PropelException('Method getFieldNames() expects the parameter $type to be one of the class constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. ' . $type . ' was given.');
		}
		return self::$fieldNames[$type];
	}

	/**
	 * Convenience method which changes table.column to alias.column.
	 *
	 * Using this method you can maintain SQL abstraction while using column aliases.
	 * <code>
	 *		$c->addAlias("alias1", TablePeer::TABLE_NAME);
	 *		$c->addJoin(TablePeer::alias("alias1", TablePeer::PRIMARY_KEY_COLUMN), TablePeer::PRIMARY_KEY_COLUMN);
	 * </code>
	 * @param      string $alias The alias for the current table.
	 * @param      string $column The column name for current table. (i.e. ComprobantePeer::COLUMN_NAME).
	 * @return     string
	 */
	public static function alias($alias, $column)
	{
		return str_replace(ComprobantePeer::TABLE_NAME.'.', $alias.'.', $column);
	}

	/**
	 * Add all the columns needed to create a new object.
	 *
	 * Note: any columns that were marked with lazyLoad="true" in the
	 * XML schema will not be added to the select list and only loaded
	 * on demand.
	 *
	 * @param      criteria object containing the columns to add.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function addSelectColumns(Criteria $criteria)
	{

		$criteria->addSelectColumn(ComprobantePeer::ID);

		$criteria->addSelectColumn(ComprobantePeer::TIPO_COMPROBANTE_ID);

		$criteria->addSelectColumn(ComprobantePeer::NRO_COMPROBANTE);

		$criteria->addSelectColumn(ComprobantePeer::PUNTO_VENTA_ID);

		$criteria->addSelectColumn(ComprobantePeer::FECHA_COMPROBANTE);

		$criteria->addSelectColumn(ComprobantePeer::CLIENTE_ID);

		$criteria->addSelectColumn(ComprobantePeer::CBT_DESDE);

		$criteria->addSelectColumn(ComprobantePeer::CBT_HASTA);

		$criteria->addSelectColumn(ComprobantePeer::IMP_TOTAL);

		$criteria->addSelectColumn(ComprobantePeer::IMP_TOTAL_CONCEPTOS);

		$criteria->addSelectColumn(ComprobantePeer::IMP_NETO);

		$criteria->addSelectColumn(ComprobantePeer::IMP_LIQUIDADO);

		$criteria->addSelectColumn(ComprobantePeer::IMP_LIQUIDADO_RNI);

		$criteria->addSelectColumn(ComprobantePeer::IMP_OPERACIONES_EX);

		$criteria->addSelectColumn(ComprobantePeer::ES_SERVICIO);

		$criteria->addSelectColumn(ComprobantePeer::FECHA_SERVICIO_DESDE);

		$criteria->addSelectColumn(ComprobantePeer::FECHA_SERVICIO_HASTA);

		$criteria->addSelectColumn(ComprobantePeer::FECHA_VENCIMIENTO_PAGO);

		$criteria->addSelectColumn(ComprobantePeer::CAE);

		$criteria->addSelectColumn(ComprobantePeer::FECHA_CAE);

		$criteria->addSelectColumn(ComprobantePeer::FECHA_VTO_CAE);

		$criteria->addSelectColumn(ComprobantePeer::RESULTADO);

		$criteria->addSelectColumn(ComprobantePeer::MOTIVO);

		$criteria->addSelectColumn(ComprobantePeer::REPROCESO);

	}

	/**
	 * Returns the number of rows matching criteria.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @return     int Number of matching rows.
	 */
	public static function doCount(Criteria $criteria, $distinct = false, PropelPDO $con = null)
	{
		// we may modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ComprobantePeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ComprobantePeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		$criteria->setDbName(self::DATABASE_NAME); // Set the correct dbName

		if ($con === null) {
			$con = Propel::getConnection(ComprobantePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}


    foreach (sfMixer::getCallables('BaseComprobantePeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseComprobantePeer', $criteria, $con);
    }


		// BasePeer returns a PDOStatement
		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}
	/**
	 * Method to select one object from the DB.
	 *
	 * @param      Criteria $criteria object used to create the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     Comprobante
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectOne(Criteria $criteria, PropelPDO $con = null)
	{
		$critcopy = clone $criteria;
		$critcopy->setLimit(1);
		$objects = ComprobantePeer::doSelect($critcopy, $con);
		if ($objects) {
			return $objects[0];
		}
		return null;
	}
	/**
	 * Method to do selects.
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     array Array of selected Objects
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelect(Criteria $criteria, PropelPDO $con = null)
	{
		return ComprobantePeer::populateObjects(ComprobantePeer::doSelectStmt($criteria, $con));
	}
	/**
	 * Prepares the Criteria object and uses the parent doSelect() method to execute a PDOStatement.
	 *
	 * Use this method directly if you want to work with an executed statement durirectly (for example
	 * to perform your own object hydration).
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con The connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 * @return     PDOStatement The executed PDOStatement object.
	 * @see        BasePeer::doSelect()
	 */
	public static function doSelectStmt(Criteria $criteria, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseComprobantePeer:doSelectStmt:doSelectStmt') as $callable)
    {
      call_user_func($callable, 'BaseComprobantePeer', $criteria, $con);
    }


		if ($con === null) {
			$con = Propel::getConnection(ComprobantePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		if (!$criteria->hasSelectClause()) {
			$criteria = clone $criteria;
			ComprobantePeer::addSelectColumns($criteria);
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		// BasePeer returns a PDOStatement
		return BasePeer::doSelect($criteria, $con);
	}
	/**
	 * Adds an object to the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doSelect*()
	 * methods in your stub classes -- you may need to explicitly add objects
	 * to the cache in order to ensure that the same objects are always returned by doSelect*()
	 * and retrieveByPK*() calls.
	 *
	 * @param      Comprobante $value A Comprobante object.
	 * @param      string $key (optional) key to use for instance map (for performance boost if key was already calculated externally).
	 */
	public static function addInstanceToPool(Comprobante $obj, $key = null)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if ($key === null) {
				$key = (string) $obj->getId();
			} // if key === null
			self::$instances[$key] = $obj;
		}
	}

	/**
	 * Removes an object from the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doDelete
	 * methods in your stub classes -- you may need to explicitly remove objects
	 * from the cache in order to prevent returning objects that no longer exist.
	 *
	 * @param      mixed $value A Comprobante object or a primary key value.
	 */
	public static function removeInstanceFromPool($value)
	{
		if (Propel::isInstancePoolingEnabled() && $value !== null) {
			if (is_object($value) && $value instanceof Comprobante) {
				$key = (string) $value->getId();
			} elseif (is_scalar($value)) {
				// assume we've been passed a primary key
				$key = (string) $value;
			} else {
				$e = new PropelException("Invalid value passed to removeInstanceFromPool().  Expected primary key or Comprobante object; got " . (is_object($value) ? get_class($value) . ' object.' : var_export($value,true)));
				throw $e;
			}

			unset(self::$instances[$key]);
		}
	} // removeInstanceFromPool()

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      string $key The key (@see getPrimaryKeyHash()) for this instance.
	 * @return     Comprobante Found object or NULL if 1) no instance exists for specified key or 2) instance pooling has been disabled.
	 * @see        getPrimaryKeyHash()
	 */
	public static function getInstanceFromPool($key)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if (isset(self::$instances[$key])) {
				return self::$instances[$key];
			}
		}
		return null; // just to be explicit
	}
	
	/**
	 * Clear the instance pool.
	 *
	 * @return     void
	 */
	public static function clearInstancePool()
	{
		self::$instances = array();
	}
	
	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      array $row PropelPDO resultset row.
	 * @param      int $startcol The 0-based offset for reading from the resultset row.
	 * @return     string A string version of PK or NULL if the components of primary key in result array are all null.
	 */
	public static function getPrimaryKeyHashFromRow($row, $startcol = 0)
	{
		// If the PK cannot be derived from the row, return NULL.
		if ($row[$startcol + 0] === null) {
			return null;
		}
		return (string) $row[$startcol + 0];
	}

	/**
	 * The returned array will contain objects of the default type or
	 * objects that inherit from the default.
	 *
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function populateObjects(PDOStatement $stmt)
	{
		$results = array();
	
		// set the class once to avoid overhead in the loop
		$cls = ComprobantePeer::getOMClass();
		$cls = substr('.'.$cls, strrpos('.'.$cls, '.') + 1);
		// populate the object(s)
		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key = ComprobantePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj = ComprobantePeer::getInstanceFromPool($key))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj->hydrate($row, 0, true); // rehydrate
				$results[] = $obj;
			} else {
		
				$obj = new $cls();
				$obj->hydrate($row);
				$results[] = $obj;
				ComprobantePeer::addInstanceToPool($obj, $key);
			} // if key exists
		}
		$stmt->closeCursor();
		return $results;
	}

	/**
	 * Returns the number of rows matching criteria, joining the related TipoComprobante table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinTipoComprobante(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ComprobantePeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ComprobantePeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ComprobantePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(ComprobantePeer::TIPO_COMPROBANTE_ID,), array(TipoComprobantePeer::ID,), $join_behavior);


    foreach (sfMixer::getCallables('BaseComprobantePeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseComprobantePeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related PuntoVenta table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinPuntoVenta(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ComprobantePeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ComprobantePeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ComprobantePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(ComprobantePeer::PUNTO_VENTA_ID,), array(PuntoVentaPeer::ID,), $join_behavior);


    foreach (sfMixer::getCallables('BaseComprobantePeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseComprobantePeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Cliente table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinCliente(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ComprobantePeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ComprobantePeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ComprobantePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(ComprobantePeer::CLIENTE_ID,), array(ClientePeer::ID,), $join_behavior);


    foreach (sfMixer::getCallables('BaseComprobantePeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseComprobantePeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of Comprobante objects pre-filled with their TipoComprobante objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Comprobante objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinTipoComprobante(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{

    foreach (sfMixer::getCallables('BaseComprobantePeer:doSelectJoin:doSelectJoin') as $callable)
    {
      call_user_func($callable, 'BaseComprobantePeer', $c, $con);
    }


		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ComprobantePeer::addSelectColumns($c);
		$startcol = (ComprobantePeer::NUM_COLUMNS - ComprobantePeer::NUM_LAZY_LOAD_COLUMNS);
		TipoComprobantePeer::addSelectColumns($c);

		$c->addJoin(array(ComprobantePeer::TIPO_COMPROBANTE_ID,), array(TipoComprobantePeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ComprobantePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ComprobantePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = ComprobantePeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ComprobantePeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = TipoComprobantePeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = TipoComprobantePeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = TipoComprobantePeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					TipoComprobantePeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Comprobante) to $obj2 (TipoComprobante)
				$obj2->addComprobante($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Comprobante objects pre-filled with their PuntoVenta objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Comprobante objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinPuntoVenta(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ComprobantePeer::addSelectColumns($c);
		$startcol = (ComprobantePeer::NUM_COLUMNS - ComprobantePeer::NUM_LAZY_LOAD_COLUMNS);
		PuntoVentaPeer::addSelectColumns($c);

		$c->addJoin(array(ComprobantePeer::PUNTO_VENTA_ID,), array(PuntoVentaPeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ComprobantePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ComprobantePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = ComprobantePeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ComprobantePeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = PuntoVentaPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = PuntoVentaPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = PuntoVentaPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					PuntoVentaPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Comprobante) to $obj2 (PuntoVenta)
				$obj2->addComprobante($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Comprobante objects pre-filled with their Cliente objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Comprobante objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinCliente(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ComprobantePeer::addSelectColumns($c);
		$startcol = (ComprobantePeer::NUM_COLUMNS - ComprobantePeer::NUM_LAZY_LOAD_COLUMNS);
		ClientePeer::addSelectColumns($c);

		$c->addJoin(array(ComprobantePeer::CLIENTE_ID,), array(ClientePeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ComprobantePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ComprobantePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = ComprobantePeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ComprobantePeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = ClientePeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = ClientePeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = ClientePeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					ClientePeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Comprobante) to $obj2 (Cliente)
				$obj2->addComprobante($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining all related tables
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAll(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ComprobantePeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ComprobantePeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ComprobantePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(ComprobantePeer::TIPO_COMPROBANTE_ID,), array(TipoComprobantePeer::ID,), $join_behavior);
		$criteria->addJoin(array(ComprobantePeer::PUNTO_VENTA_ID,), array(PuntoVentaPeer::ID,), $join_behavior);
		$criteria->addJoin(array(ComprobantePeer::CLIENTE_ID,), array(ClientePeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseComprobantePeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseComprobantePeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}

	/**
	 * Selects a collection of Comprobante objects pre-filled with all related objects.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Comprobante objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAll(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{

    foreach (sfMixer::getCallables('BaseComprobantePeer:doSelectJoinAll:doSelectJoinAll') as $callable)
    {
      call_user_func($callable, 'BaseComprobantePeer', $c, $con);
    }


		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ComprobantePeer::addSelectColumns($c);
		$startcol2 = (ComprobantePeer::NUM_COLUMNS - ComprobantePeer::NUM_LAZY_LOAD_COLUMNS);

		TipoComprobantePeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (TipoComprobantePeer::NUM_COLUMNS - TipoComprobantePeer::NUM_LAZY_LOAD_COLUMNS);

		PuntoVentaPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (PuntoVentaPeer::NUM_COLUMNS - PuntoVentaPeer::NUM_LAZY_LOAD_COLUMNS);

		ClientePeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (ClientePeer::NUM_COLUMNS - ClientePeer::NUM_LAZY_LOAD_COLUMNS);

		$c->addJoin(array(ComprobantePeer::TIPO_COMPROBANTE_ID,), array(TipoComprobantePeer::ID,), $join_behavior);
		$c->addJoin(array(ComprobantePeer::PUNTO_VENTA_ID,), array(PuntoVentaPeer::ID,), $join_behavior);
		$c->addJoin(array(ComprobantePeer::CLIENTE_ID,), array(ClientePeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ComprobantePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ComprobantePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = ComprobantePeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ComprobantePeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

			// Add objects for joined TipoComprobante rows

			$key2 = TipoComprobantePeer::getPrimaryKeyHashFromRow($row, $startcol2);
			if ($key2 !== null) {
				$obj2 = TipoComprobantePeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = TipoComprobantePeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TipoComprobantePeer::addInstanceToPool($obj2, $key2);
				} // if obj2 loaded

				// Add the $obj1 (Comprobante) to the collection in $obj2 (TipoComprobante)
				$obj2->addComprobante($obj1);
			} // if joined row not null

			// Add objects for joined PuntoVenta rows

			$key3 = PuntoVentaPeer::getPrimaryKeyHashFromRow($row, $startcol3);
			if ($key3 !== null) {
				$obj3 = PuntoVentaPeer::getInstanceFromPool($key3);
				if (!$obj3) {

					$omClass = PuntoVentaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					PuntoVentaPeer::addInstanceToPool($obj3, $key3);
				} // if obj3 loaded

				// Add the $obj1 (Comprobante) to the collection in $obj3 (PuntoVenta)
				$obj3->addComprobante($obj1);
			} // if joined row not null

			// Add objects for joined Cliente rows

			$key4 = ClientePeer::getPrimaryKeyHashFromRow($row, $startcol4);
			if ($key4 !== null) {
				$obj4 = ClientePeer::getInstanceFromPool($key4);
				if (!$obj4) {

					$omClass = ClientePeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					ClientePeer::addInstanceToPool($obj4, $key4);
				} // if obj4 loaded

				// Add the $obj1 (Comprobante) to the collection in $obj4 (Cliente)
				$obj4->addComprobante($obj1);
			} // if joined row not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related TipoComprobante table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptTipoComprobante(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ComprobantePeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ComprobantePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(ComprobantePeer::PUNTO_VENTA_ID,), array(PuntoVentaPeer::ID,), $join_behavior);
				$criteria->addJoin(array(ComprobantePeer::CLIENTE_ID,), array(ClientePeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseComprobantePeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseComprobantePeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related PuntoVenta table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptPuntoVenta(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ComprobantePeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ComprobantePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(ComprobantePeer::TIPO_COMPROBANTE_ID,), array(TipoComprobantePeer::ID,), $join_behavior);
				$criteria->addJoin(array(ComprobantePeer::CLIENTE_ID,), array(ClientePeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseComprobantePeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseComprobantePeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Cliente table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptCliente(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ComprobantePeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ComprobantePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(ComprobantePeer::TIPO_COMPROBANTE_ID,), array(TipoComprobantePeer::ID,), $join_behavior);
				$criteria->addJoin(array(ComprobantePeer::PUNTO_VENTA_ID,), array(PuntoVentaPeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseComprobantePeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseComprobantePeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of Comprobante objects pre-filled with all related objects except TipoComprobante.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Comprobante objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptTipoComprobante(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{

    foreach (sfMixer::getCallables('BaseComprobantePeer:doSelectJoinAllExcept:doSelectJoinAllExcept') as $callable)
    {
      call_user_func($callable, 'BaseComprobantePeer', $c, $con);
    }


		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ComprobantePeer::addSelectColumns($c);
		$startcol2 = (ComprobantePeer::NUM_COLUMNS - ComprobantePeer::NUM_LAZY_LOAD_COLUMNS);

		PuntoVentaPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (PuntoVentaPeer::NUM_COLUMNS - PuntoVentaPeer::NUM_LAZY_LOAD_COLUMNS);

		ClientePeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (ClientePeer::NUM_COLUMNS - ClientePeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(ComprobantePeer::PUNTO_VENTA_ID,), array(PuntoVentaPeer::ID,), $join_behavior);
				$c->addJoin(array(ComprobantePeer::CLIENTE_ID,), array(ClientePeer::ID,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ComprobantePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ComprobantePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = ComprobantePeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ComprobantePeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined PuntoVenta rows

				$key2 = PuntoVentaPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = PuntoVentaPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = PuntoVentaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					PuntoVentaPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Comprobante) to the collection in $obj2 (PuntoVenta)
				$obj2->addComprobante($obj1);

			} // if joined row is not null

				// Add objects for joined Cliente rows

				$key3 = ClientePeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = ClientePeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = ClientePeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					ClientePeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Comprobante) to the collection in $obj3 (Cliente)
				$obj3->addComprobante($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Comprobante objects pre-filled with all related objects except PuntoVenta.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Comprobante objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptPuntoVenta(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ComprobantePeer::addSelectColumns($c);
		$startcol2 = (ComprobantePeer::NUM_COLUMNS - ComprobantePeer::NUM_LAZY_LOAD_COLUMNS);

		TipoComprobantePeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (TipoComprobantePeer::NUM_COLUMNS - TipoComprobantePeer::NUM_LAZY_LOAD_COLUMNS);

		ClientePeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (ClientePeer::NUM_COLUMNS - ClientePeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(ComprobantePeer::TIPO_COMPROBANTE_ID,), array(TipoComprobantePeer::ID,), $join_behavior);
				$c->addJoin(array(ComprobantePeer::CLIENTE_ID,), array(ClientePeer::ID,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ComprobantePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ComprobantePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = ComprobantePeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ComprobantePeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined TipoComprobante rows

				$key2 = TipoComprobantePeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = TipoComprobantePeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = TipoComprobantePeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TipoComprobantePeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Comprobante) to the collection in $obj2 (TipoComprobante)
				$obj2->addComprobante($obj1);

			} // if joined row is not null

				// Add objects for joined Cliente rows

				$key3 = ClientePeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = ClientePeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = ClientePeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					ClientePeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Comprobante) to the collection in $obj3 (Cliente)
				$obj3->addComprobante($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Comprobante objects pre-filled with all related objects except Cliente.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Comprobante objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptCliente(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		ComprobantePeer::addSelectColumns($c);
		$startcol2 = (ComprobantePeer::NUM_COLUMNS - ComprobantePeer::NUM_LAZY_LOAD_COLUMNS);

		TipoComprobantePeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (TipoComprobantePeer::NUM_COLUMNS - TipoComprobantePeer::NUM_LAZY_LOAD_COLUMNS);

		PuntoVentaPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (PuntoVentaPeer::NUM_COLUMNS - PuntoVentaPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(ComprobantePeer::TIPO_COMPROBANTE_ID,), array(TipoComprobantePeer::ID,), $join_behavior);
				$c->addJoin(array(ComprobantePeer::PUNTO_VENTA_ID,), array(PuntoVentaPeer::ID,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ComprobantePeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ComprobantePeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = ComprobantePeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				ComprobantePeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined TipoComprobante rows

				$key2 = TipoComprobantePeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = TipoComprobantePeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = TipoComprobantePeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					TipoComprobantePeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Comprobante) to the collection in $obj2 (TipoComprobante)
				$obj2->addComprobante($obj1);

			} // if joined row is not null

				// Add objects for joined PuntoVenta rows

				$key3 = PuntoVentaPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = PuntoVentaPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = PuntoVentaPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					PuntoVentaPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Comprobante) to the collection in $obj3 (PuntoVenta)
				$obj3->addComprobante($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


  static public function getUniqueColumnNames()
  {
    return array();
  }
	/**
	 * Returns the TableMap related to this peer.
	 * This method is not needed for general use but a specific application could have a need.
	 * @return     TableMap
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function getTableMap()
	{
		return Propel::getDatabaseMap(self::DATABASE_NAME)->getTable(self::TABLE_NAME);
	}

	/**
	 * The class that the Peer will make instances of.
	 *
	 * This uses a dot-path notation which is tranalted into a path
	 * relative to a location on the PHP include_path.
	 * (e.g. path.to.MyClass -> 'path/to/MyClass.php')
	 *
	 * @return     string path.to.ClassName
	 */
	public static function getOMClass()
	{
		return ComprobantePeer::CLASS_DEFAULT;
	}

	/**
	 * Method perform an INSERT on the database, given a Comprobante or Criteria object.
	 *
	 * @param      mixed $values Criteria or Comprobante object containing data that is used to create the INSERT statement.
	 * @param      PropelPDO $con the PropelPDO connection to use
	 * @return     mixed The new primary key.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doInsert($values, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseComprobantePeer:doInsert:pre') as $callable)
    {
      $ret = call_user_func($callable, 'BaseComprobantePeer', $values, $con);
      if (false !== $ret)
      {
        return $ret;
      }
    }


		if ($con === null) {
			$con = Propel::getConnection(ComprobantePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity
		} else {
			$criteria = $values->buildCriteria(); // build Criteria from Comprobante object
		}

		if ($criteria->containsKey(ComprobantePeer::ID) && $criteria->keyContainsValue(ComprobantePeer::ID) ) {
			throw new PropelException('Cannot insert a value for auto-increment primary key ('.ComprobantePeer::ID.')');
		}


		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		try {
			// use transaction because $criteria could contain info
			// for more than one table (I guess, conceivably)
			$con->beginTransaction();
			$pk = BasePeer::doInsert($criteria, $con);
			$con->commit();
		} catch(PropelException $e) {
			$con->rollBack();
			throw $e;
		}

		
    foreach (sfMixer::getCallables('BaseComprobantePeer:doInsert:post') as $callable)
    {
      call_user_func($callable, 'BaseComprobantePeer', $values, $con, $pk);
    }

    return $pk;
	}

	/**
	 * Method perform an UPDATE on the database, given a Comprobante or Criteria object.
	 *
	 * @param      mixed $values Criteria or Comprobante object containing data that is used to create the UPDATE statement.
	 * @param      PropelPDO $con The connection to use (specify PropelPDO connection object to exert more control over transactions).
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doUpdate($values, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseComprobantePeer:doUpdate:pre') as $callable)
    {
      $ret = call_user_func($callable, 'BaseComprobantePeer', $values, $con);
      if (false !== $ret)
      {
        return $ret;
      }
    }


		if ($con === null) {
			$con = Propel::getConnection(ComprobantePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$selectCriteria = new Criteria(self::DATABASE_NAME);

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity

			$comparison = $criteria->getComparison(ComprobantePeer::ID);
			$selectCriteria->add(ComprobantePeer::ID, $criteria->remove(ComprobantePeer::ID), $comparison);

		} else { // $values is Comprobante object
			$criteria = $values->buildCriteria(); // gets full criteria
			$selectCriteria = $values->buildPkeyCriteria(); // gets criteria w/ primary key(s)
		}

		// set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$ret = BasePeer::doUpdate($selectCriteria, $criteria, $con);
	

    foreach (sfMixer::getCallables('BaseComprobantePeer:doUpdate:post') as $callable)
    {
      call_user_func($callable, 'BaseComprobantePeer', $values, $con, $ret);
    }

    return $ret;
  }

	/**
	 * Method to DELETE all rows from the comprobante table.
	 *
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 */
	public static function doDeleteAll($con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(ComprobantePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		$affectedRows = 0; // initialize var to track total num of affected rows
		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			$affectedRows += BasePeer::doDeleteAll(ComprobantePeer::TABLE_NAME, $con);
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Method perform a DELETE on the database, given a Comprobante or Criteria object OR a primary key value.
	 *
	 * @param      mixed $values Criteria or Comprobante object or primary key or array of primary keys
	 *              which is used to create the DELETE statement
	 * @param      PropelPDO $con the connection to use
	 * @return     int 	The number of affected rows (if supported by underlying database driver).  This includes CASCADE-related rows
	 *				if supported by native driver or if emulated using Propel.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	 public static function doDelete($values, PropelPDO $con = null)
	 {
		if ($con === null) {
			$con = Propel::getConnection(ComprobantePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			// invalidate the cache for all objects of this type, since we have no
			// way of knowing (without running a query) what objects should be invalidated
			// from the cache based on this Criteria.
			ComprobantePeer::clearInstancePool();

			// rename for clarity
			$criteria = clone $values;
		} elseif ($values instanceof Comprobante) {
			// invalidate the cache for this single object
			ComprobantePeer::removeInstanceFromPool($values);
			// create criteria based on pk values
			$criteria = $values->buildPkeyCriteria();
		} else {
			// it must be the primary key



			$criteria = new Criteria(self::DATABASE_NAME);
			$criteria->add(ComprobantePeer::ID, (array) $values, Criteria::IN);

			foreach ((array) $values as $singleval) {
				// we can invalidate the cache for this single object
				ComprobantePeer::removeInstanceFromPool($singleval);
			}
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$affectedRows = 0; // initialize var to track total num of affected rows

		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			
			$affectedRows += BasePeer::doDelete($criteria, $con);

			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Validates all modified columns of given Comprobante object.
	 * If parameter $columns is either a single column name or an array of column names
	 * than only those columns are validated.
	 *
	 * NOTICE: This does not apply to primary or foreign keys for now.
	 *
	 * @param      Comprobante $obj The object to validate.
	 * @param      mixed $cols Column name or array of column names.
	 *
	 * @return     mixed TRUE if all columns are valid or the error message of the first invalid column.
	 */
	public static function doValidate(Comprobante $obj, $cols = null)
	{
		$columns = array();

		if ($cols) {
			$dbMap = Propel::getDatabaseMap(ComprobantePeer::DATABASE_NAME);
			$tableMap = $dbMap->getTable(ComprobantePeer::TABLE_NAME);

			if (! is_array($cols)) {
				$cols = array($cols);
			}

			foreach ($cols as $colName) {
				if ($tableMap->containsColumn($colName)) {
					$get = 'get' . $tableMap->getColumn($colName)->getPhpName();
					$columns[$colName] = $obj->$get();
				}
			}
		} else {

		}

		$res =  BasePeer::doValidate(ComprobantePeer::DATABASE_NAME, ComprobantePeer::TABLE_NAME, $columns);
    if ($res !== true) {
        $request = sfContext::getInstance()->getRequest();
        foreach ($res as $failed) {
            $col = ComprobantePeer::translateFieldname($failed->getColumn(), BasePeer::TYPE_COLNAME, BasePeer::TYPE_PHPNAME);
        }
    }

    return $res;
	}

	/**
	 * Retrieve a single object by pkey.
	 *
	 * @param      int $pk the primary key.
	 * @param      PropelPDO $con the connection to use
	 * @return     Comprobante
	 */
	public static function retrieveByPK($pk, PropelPDO $con = null)
	{

		if (null !== ($obj = ComprobantePeer::getInstanceFromPool((string) $pk))) {
			return $obj;
		}

		if ($con === null) {
			$con = Propel::getConnection(ComprobantePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria = new Criteria(ComprobantePeer::DATABASE_NAME);
		$criteria->add(ComprobantePeer::ID, $pk);

		$v = ComprobantePeer::doSelect($criteria, $con);

		return !empty($v) > 0 ? $v[0] : null;
	}

	/**
	 * Retrieve multiple objects by pkey.
	 *
	 * @param      array $pks List of primary keys
	 * @param      PropelPDO $con the connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function retrieveByPKs($pks, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(ComprobantePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$objs = null;
		if (empty($pks)) {
			$objs = array();
		} else {
			$criteria = new Criteria(ComprobantePeer::DATABASE_NAME);
			$criteria->add(ComprobantePeer::ID, $pks, Criteria::IN);
			$objs = ComprobantePeer::doSelect($criteria, $con);
		}
		return $objs;
	}

} // BaseComprobantePeer

// This is the static code needed to register the MapBuilder for this table with the main Propel class.
//
// NOTE: This static code cannot call methods on the ComprobantePeer class, because it is not defined yet.
// If you need to use overridden methods, you can add this code to the bottom of the ComprobantePeer class:
//
// Propel::getDatabaseMap(ComprobantePeer::DATABASE_NAME)->addTableBuilder(ComprobantePeer::TABLE_NAME, ComprobantePeer::getMapBuilder());
//
// Doing so will effectively overwrite the registration below.

Propel::getDatabaseMap(BaseComprobantePeer::DATABASE_NAME)->addTableBuilder(BaseComprobantePeer::TABLE_NAME, BaseComprobantePeer::getMapBuilder());

